/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantProfile } from "./RestaurantProfile";
import { RestaurantProfileCountArgs } from "./RestaurantProfileCountArgs";
import { RestaurantProfileFindManyArgs } from "./RestaurantProfileFindManyArgs";
import { RestaurantProfileFindUniqueArgs } from "./RestaurantProfileFindUniqueArgs";
import { CreateRestaurantProfileArgs } from "./CreateRestaurantProfileArgs";
import { UpdateRestaurantProfileArgs } from "./UpdateRestaurantProfileArgs";
import { DeleteRestaurantProfileArgs } from "./DeleteRestaurantProfileArgs";
import { MenuItemFindManyArgs } from "../../menuItem/base/MenuItemFindManyArgs";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { RestaurantProfileService } from "../restaurantProfile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantProfile)
export class RestaurantProfileResolverBase {
  constructor(
    protected readonly service: RestaurantProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantProfile",
    action: "read",
    possession: "any",
  })
  async _restaurantProfilesMeta(
    @graphql.Args() args: RestaurantProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantProfile])
  @nestAccessControl.UseRoles({
    resource: "RestaurantProfile",
    action: "read",
    possession: "any",
  })
  async restaurantProfiles(
    @graphql.Args() args: RestaurantProfileFindManyArgs
  ): Promise<RestaurantProfile[]> {
    return this.service.restaurantProfiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantProfile",
    action: "read",
    possession: "own",
  })
  async restaurantProfile(
    @graphql.Args() args: RestaurantProfileFindUniqueArgs
  ): Promise<RestaurantProfile | null> {
    const result = await this.service.restaurantProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantProfile)
  @nestAccessControl.UseRoles({
    resource: "RestaurantProfile",
    action: "create",
    possession: "any",
  })
  async createRestaurantProfile(
    @graphql.Args() args: CreateRestaurantProfileArgs
  ): Promise<RestaurantProfile> {
    return await this.service.createRestaurantProfile({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantProfile)
  @nestAccessControl.UseRoles({
    resource: "RestaurantProfile",
    action: "update",
    possession: "any",
  })
  async updateRestaurantProfile(
    @graphql.Args() args: UpdateRestaurantProfileArgs
  ): Promise<RestaurantProfile | null> {
    try {
      return await this.service.updateRestaurantProfile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantProfile)
  @nestAccessControl.UseRoles({
    resource: "RestaurantProfile",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantProfile(
    @graphql.Args() args: DeleteRestaurantProfileArgs
  ): Promise<RestaurantProfile | null> {
    try {
      return await this.service.deleteRestaurantProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItem], { name: "menuItems" })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async findMenuItems(
    @graphql.Parent() parent: RestaurantProfile,
    @graphql.Args() args: MenuItemFindManyArgs
  ): Promise<MenuItem[]> {
    const results = await this.service.findMenuItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @graphql.Parent() parent: RestaurantProfile,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
