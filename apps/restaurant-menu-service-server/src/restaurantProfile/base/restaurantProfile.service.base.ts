/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RestaurantProfile as PrismaRestaurantProfile,
  MenuItem as PrismaMenuItem,
  Order as PrismaOrder,
} from "@prisma/client";

export class RestaurantProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RestaurantProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restaurantProfile.count(args);
  }

  async restaurantProfiles<T extends Prisma.RestaurantProfileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantProfileFindManyArgs>
  ): Promise<PrismaRestaurantProfile[]> {
    return this.prisma.restaurantProfile.findMany<Prisma.RestaurantProfileFindManyArgs>(
      args
    );
  }
  async restaurantProfile<T extends Prisma.RestaurantProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantProfileFindUniqueArgs>
  ): Promise<PrismaRestaurantProfile | null> {
    return this.prisma.restaurantProfile.findUnique(args);
  }
  async createRestaurantProfile<T extends Prisma.RestaurantProfileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantProfileCreateArgs>
  ): Promise<PrismaRestaurantProfile> {
    return this.prisma.restaurantProfile.create<T>(args);
  }
  async updateRestaurantProfile<T extends Prisma.RestaurantProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantProfileUpdateArgs>
  ): Promise<PrismaRestaurantProfile> {
    return this.prisma.restaurantProfile.update<T>(args);
  }
  async deleteRestaurantProfile<T extends Prisma.RestaurantProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantProfileDeleteArgs>
  ): Promise<PrismaRestaurantProfile> {
    return this.prisma.restaurantProfile.delete(args);
  }

  async findMenuItems(
    parentId: string,
    args: Prisma.MenuItemFindManyArgs
  ): Promise<PrismaMenuItem[]> {
    return this.prisma.restaurantProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .menuItems(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.restaurantProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }
}
